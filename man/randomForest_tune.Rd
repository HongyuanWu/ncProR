% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Modelling.R
\name{randomForest_tune}
\alias{randomForest_tune}
\title{Find the Best Number of Trees for Random Forest Classifier Using K-Fold Cross Validation}
\usage{
randomForest_tune(datasets = list(), label.col = 1,
  positive.class = NULL, folds.num = 10, ntree.range = c(200, 500,
  1000, 1500, 2000), seed = 1, return.model = TRUE,
  parallel.cores = 2, ...)
}
\arguments{
\item{datasets}{should be a list containing one or several input datasets. See examples.}

\item{label.col}{an integer. Column number of the label.}

\item{positive.class}{\code{NULL} or string. Which class is the positive class? Should be one
of the classes in label column. The first class in label column will be selected
as the positive class if leave \code{positive.class = NULL}.}

\item{folds.num}{an integer. Number of folds. Default \code{10} for 10-fold cross validation.}

\item{ntree.range}{parameter for random forest. Used to indicate the range of ntree.
Default: \code{c(200, 500, 1000, 1500, 2000)}.}

\item{seed}{random seed for data splitting. Integer.}

\item{return.model}{logical. If \code{TRUE}, the function will return a random forest
model built with the optimal ntree. The trainging set is the combination of all input datasets.}

\item{parallel.cores}{an integer specfying the number of cores for parallel computation. Default: \code{2}.
Set \code{parallel.cores = -1} to run with all the cores.}

\item{...}{other parameters passed to \code{\link[randomForest]{randomForest}} function.}
}
\value{
If \code{return.model = TRUR}, the function returns a randomForest model.
If \code{FALSE}, the function returns the optimal ntree and the performance.
}
\description{
Find the Best Number of Trees for Random Forest Classifier Using K-Fold Cross Validation
}
\examples{

data(demoPositiveSeq)
data(demoNegativeSeq)

RNA.positive <- demoPositiveSeq$RNA.positive
Pro.positive <- demoPositiveSeq$Pro.positive
RNA.negative <- demoNegativeSeq$RNA.negative
Pro.negative <- demoNegativeSeq$Pro.negative

dataPositive <- featureFreq(seqRNA = RNA.positive, seqPro = Pro.positive,
                            label = "Interact", featureMode = "conc",
                            computePro = "DeNovo", k.Pro = 3, k.RNA = 2,
                            normalize = "none", parallel.cores = 2)

dataNegative <- featureFreq(seqRNA = RNA.negative, seqPro = Pro.negative,
                            label = "Non.Interact", featureMode = "conc",
                            computePro = "DeNovo", k.Pro = 3, k.RNA = 2,
                            normalize = "none", parallel.cores = 2)

dataset <- rbind(dataPositive, dataNegative)

Perf_tune <- randomForest_tune(datasets = list(dataset), label.col = 1,
                               positive.class = "Interact", folds.num = 5,
                               ntree.range = c(50, 100, 150), seed = 123,
                               return.model = TRUE, parallel.cores = 2,
                               importance = TRUE, mtry = 20)

# if you have more than one input dataset,
# use code list(dataset1, dataset2, dataset3)

}
\seealso{
\code{\link{randomForest_RFE}}, \code{\link{randomForest_CV}}
}
